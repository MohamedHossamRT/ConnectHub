/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Frontend;

import connecthub.ChatWatcher;
import connecthub.entities.Chat;
import connecthub.entities.Message;
import connecthub.mappers.ChatMapper;
import connecthub.mappers.MessageMapper;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import javax.swing.SwingUtilities;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author User
 */
public class ChatWindow extends javax.swing.JFrame {

    /**
     * Creates new form ChatWindow
     */
    public ChatWindow() {
        userOneId = 1; //Current user 
        userTwoId = 2; //Friend       
        Optional<Chat> chat = ChatMapper.get(1, 2);
        if (chat.isPresent()) {
            chatId = chat.get().getID();
        }
        chatWatcher = new ChatWatcher();
        initComponents();
        messagesArea.setEditable(false); // Make it read-only
        startFetchingMessages();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        newMessage = new javax.swing.JTextArea();
        sendMessage = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        messagesArea = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        newMessage.setColumns(20);
        newMessage.setRows(5);
        jScrollPane2.setViewportView(newMessage);

        sendMessage.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        sendMessage.setText("Send");
        sendMessage.setActionCommand("Send");
        sendMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMessageActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(messagesArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sendMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(sendMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMessageActionPerformed
        // TODO add your handling code here:
        String messageContent = newMessage.getText().trim();
        if (!messageContent.isEmpty()) {
            // Create and save the message
            Message toSendMessage = new Message(this.userOneId, this.userTwoId, chatId, messageContent);
            MessageMapper.create(toSendMessage);

            // Append the message to the chat area instantly
            appendStyledMessage(messagesArea, messageContent + "\n", false);
            fetchedMessages.add(toSendMessage);

            messagesArea.setCaretPosition(messagesArea.getDocument().getLength());

            // Clear the input field
            newMessage.setText("");
        }

    }//GEN-LAST:event_sendMessageActionPerformed
    private void startFetchingMessages() {
        new Thread(() -> {
            chatWatcher.startWatching(this.userOneId, this.userTwoId);
            while (true) {
                try {
                    List<Message> newMessages = chatWatcher.getNewMessages();
                    if (!newMessages.isEmpty()) {
                        SwingUtilities.invokeLater(() -> {
                            for (Message message : newMessages) {
                                if (!fetchedMessages.contains(message)) {
                                    String formattedMessage;
                                    if (message.getRecieverId() == this.userOneId) {
                                        formattedMessage = message.getContent();
                                        appendStyledMessage(messagesArea, formattedMessage, true);
                                    } else {
                                        formattedMessage = message.getContent();
                                        appendStyledMessage(messagesArea, formattedMessage, false);
                                    }
                                    fetchedMessages.add(message);
                                    message.setStatus("seen");
                                    MessageMapper.update(message.getID(), message);
                                }
                            }
                            messagesArea.setCaretPosition(messagesArea.getDocument().getLength());
                        });
                    }
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    break;
                }
            }
        }).start();
    }

    private void appendStyledMessage(javax.swing.JTextPane textPane, String message, boolean isReceived) {

        StyledDocument doc = textPane.getStyledDocument();
        SimpleAttributeSet attributes = new SimpleAttributeSet();
        StyleConstants.setFontSize(attributes, 16); // Set font size

        // Set padding between messages
        StyleConstants.setSpaceAbove(attributes, 5); // Space above the message
        StyleConstants.setSpaceBelow(attributes, 5); // Space below the message

        if (isReceived) {
            StyleConstants.setAlignment(attributes, StyleConstants.ALIGN_LEFT);
            StyleConstants.setBackground(attributes, new Color(173, 216, 230)); // Light blue background
            StyleConstants.setForeground(attributes, Color.BLACK); // Black text for readability
        } else {
            StyleConstants.setAlignment(attributes, StyleConstants.ALIGN_RIGHT);
            StyleConstants.setBackground(attributes, new Color(144, 238, 144)); // Light green background
            StyleConstants.setForeground(attributes, Color.BLACK); // Black text for readability
        }

        try {
            int start = doc.getLength(); // Get the start position for the new message
            doc.insertString(start, message + "\n", attributes); // Insert the message

            // Apply the style to the inserted text
            doc.setParagraphAttributes(start, message.length(), attributes, false);
        } catch (BadLocationException e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatWindow().setVisible(true);
            }
        });
    }
    private ChatWatcher chatWatcher;
    private int userOneId;
    private int userTwoId;
    private int chatId;
    private List<Message> fetchedMessages = new ArrayList<>();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane messagesArea;
    private javax.swing.JTextArea newMessage;
    private javax.swing.JButton sendMessage;
    // End of variables declaration//GEN-END:variables
}
